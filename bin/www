#!/usr/bin/env node

console.log("Hola mundo")
const mongoose = require('mongoose');
const schema_estudiantes=require('../schemas/schema_estudiantes');
const schema_tweets=require('../schemas/schema_tweets');
const estudiantes = mongoose.model('Estudiantes', schema_estudiantes,'Estudiantes');
const tweets = mongoose.model('Tweets', schema_tweets,'Tweets');
const axios = require('axios');
const cron = require('node-cron');
//Funcion de espera 
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

cron.schedule('30 5 * * *', 
  async function gestionarTweets() {
    //Fecha de hoy
    const hoy = new Date();
    //Usuarios que no tienen tweets pero han sido registrados
    const estudiantes_registrados=await estudiantes.find({}).select({usuario:1,_id:0});
    console.log(estudiantes_registrados);
    var estudiantes_sin_tweets=[];
    for (let e of estudiantes_registrados){
      var existe_tweet_usuario= await tweets.findOne({usuario: e.usuario});
      if(!existe_tweet_usuario)
      estudiantes_sin_tweets.push(e.usuario);
    }
    //Registrar tweets de usuario
    for (let e of estudiantes_sin_tweets) {
      axios.post("https://andressalcedo2023.pythonanywhere.com/tweets",{"usuario": e})
      .then(
        async function (datos) {
          const tweets_usuario=datos.data;
          try{
            for (const tweet_usuario of tweets_usuario){
              var existe_tweet_usuario= await tweets.findOne({mensaje: tweet_usuario.texto, fecha: tweet_usuario.fecha, usuario: e});
              if(!existe_tweet_usuario){
                const tweet=new tweets({
                  estado: tweet_usuario.estado,
                  mensaje: tweet_usuario.texto,
                  fecha: tweet_usuario.fecha,
                  usuario: e
                });
                await tweet.save();
              }
            }
          }
          catch(error){          
            console.log(error)
          }
        })
      .catch( 
        async function (error) {
          await sleep(60000*15)
          console.log(error)
        });
      await sleep(60000*3);
    }
    //Actualizar tweets de usuario
    const estudiantes_por_actualizar=await estudiantes.find({});
    for (let e of estudiantes_por_actualizar){
      axios.post("https://andressalcedo2023.pythonanywhere.com/actualizar_tweets", {"usuario": e.usuario, "fecha":hoy})
      .then(
        async function (datos) {
          const tweets_usuario=datos.data;
          try{
            for (const tweet_usuario of tweets_usuario){
              var existe_tweet_usuario= await tweets.findOne({mensaje: tweet_usuario.texto, fecha: tweet_usuario.fecha, usuario: e});
              if(!existe_tweet_usuario){
                const tweet=new tweets({
                  estado: tweet_usuario.estado,
                  mensaje: tweet_usuario.texto, 
                  fecha: tweet_usuario.fecha,
                  usuario: e
                });
                await tweet.save();
              }
            }
          }
          catch(error){
            console.log(error);
          }
        })
      .catch(
        async function (error) {
          await sleep(60000*15)
          console.log(error)
        });
      await sleep(60000*3);
    }
  }
);

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('actualizador:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
